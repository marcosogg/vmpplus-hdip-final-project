---
description: 
globs: 
alwaysApply: true
---
# Supabase Authentication Implementation Rules for VMP PLUS

This document provides explicit instructions for implementing authentication with Supabase in the VMP PLUS project. Follow these rules precisely to ensure a working authentication system.

## Authentication Foundation

### 1. Core Authentication Principles

**RULE:** Implement authentication using Supabase Auth ONLY. Do not mix with other authentication methods.

**RULE:** Follow the exact implementation order:
1. Supabase client setup
2. Auth types definition
3. Auth hooks/context creation
4. UI components implementation
5. Protected routes configuration

**RULE:** Use TypeScript for all authentication code. No `any` types allowed.

### 2. Supabase Client Setup

**RULE:** The Supabase client must be initialized EXACTLY as follows in `src/lib/supabase.ts`:

```typescript
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Environment variable validation
if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error(
    'Missing Supabase environment variables. Check .env file and ensure variables start with VITE_'
  );
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Export auth for convenience
export const auth = supabase.auth;
```

**RULE:** Never recreate the Supabase client in any other file. Always import from this central file.

## Authentication Types and Context

### 3. Authentication Types

**RULE:** Define these EXACT auth types in `src/types/auth.ts`:

```typescript
import type { User, Session } from '@supabase/supabase-js';

export type AuthUser = User;

export interface AuthState {
  user: AuthUser | null;
  session: Session | null;
  isLoading: boolean;
  isAuthenticated: boolean;
}

export interface AuthContextType extends AuthState {
  signIn: (email: string, password: string) => Promise<{ 
    success: boolean; 
    error: string | null 
  }>;
  signUp: (email: string, password: string) => Promise<{ 
    success: boolean; 
    error: string | null 
  }>;
  signOut: () => Promise<void>;
}
```

### 4. Authentication Context

**RULE:** Create the AuthContext EXACTLY as follows in `src/context/auth-context.tsx`:

```typescript
import { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { Session, User } from '@supabase/supabase-js';
import { supabase } from '@/lib/supabase';
import { AuthContextType, AuthState } from '@/types/auth';

// Initial state
const initialState: AuthState = {
  user: null,
  session: null,
  isLoading: true,
  isAuthenticated: false,
};

// Create context with initial state
export const AuthContext = createContext<AuthContextType>({
  ...initialState,
  signIn: async () => ({ success: false, error: 'AuthContext not initialized' }),
  signUp: async () => ({ success: false, error: 'AuthContext not initialized' }),
  signOut: async () => {},
});

// Provider props type
interface AuthProviderProps {
  children: ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [state, setState] = useState<AuthState>(initialState);

  // Initialize auth state
  useEffect(() => {
    // Get initial session
    const initializeAuth = async () => {
      const { data } = await supabase.auth.getSession();
      
      // Update state with session data
      if (data.session) {
        setState({
          user: data.session.user,
          session: data.session,
          isLoading: false,
          isAuthenticated: true,
        });
      } else {
        setState({
          user: null,
          session: null,
          isLoading: false,
          isAuthenticated: false,
        });
      }
    };

    initializeAuth();

    // Set up auth state change listener
    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (_event, session) => {
        setState({
          user: session?.user ?? null,
          session,
          isLoading: false,
          isAuthenticated: !!session,
        });
      }
    );

    // Clean up subscription
    return () => {
      authListener?.subscription.unsubscribe();
    };
  }, []);

  // Sign in with email and password
  const signIn = async (email: string, password: string) => {
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        return { success: false, error: error.message };
      }

      return { success: true, error: null };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'An unknown error occurred',
      };
    }
  };

  // Sign up with email and password
  const signUp = async (email: string, password: string) => {
    try {
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
      });

      if (error) {
        return { success: false, error: error.message };
      }

      return { success: true, error: null };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'An unknown error occurred',
      };
    }
  };

  // Sign out
  const signOut = async () => {
    await supabase.auth.signOut();
  };

  const value = {
    ...state,
    signIn,
    signUp,
    signOut,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}
```

### 5. Auth Hook Implementation

**RULE:** Create the `useAuth` hook EXACTLY as follows in `src/hooks/use-auth.ts`:

```typescript
import { useContext } from 'react';
import { AuthContext } from '@/context/auth-context';
import { AuthContextType } from '@/types/auth';

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  
  return context;
};
```

## Authentication Components and Integration

### 6. Provider Integration

**RULE:** Wrap the application with `AuthProvider` in `src/main.tsx`:

```tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { AuthProvider } from './context/auth-context';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <App />
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);
```

### 7. Protected Route Component

**RULE:** Create the protected route component EXACTLY as follows in `src/components/auth/protected-route.tsx`:

```tsx
import { ReactNode } from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/hooks/use-auth';

interface ProtectedRouteProps {
  children: ReactNode;
}

export function ProtectedRoute({ children }: ProtectedRouteProps) {
  const { isAuthenticated, isLoading } = useAuth();
  const location = useLocation();

  // Show loading state
  if (isLoading) {
    return <div className="p-8 text-center">Loading...</div>;
  }

  // Redirect to login if not authenticated
  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // Render children if authenticated
  return <>{children}</>;
}
```

### 8. Login Form Component

**RULE:** Create the login form component in `src/pages/auth/login-page.tsx` with THESE ESSENTIAL elements:

```tsx
import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '@/hooks/use-auth';

export function LoginPage() {
  const navigate = useNavigate();
  const { signIn } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setIsLoading(true);

    try {
      const { success, error } = await signIn(email, password);
      
      if (success) {
        navigate('/dashboard');
      } else {
        setError(error || 'Failed to sign in');
      }
    } catch (err) {
      setError('An unexpected error occurred');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center">
      <div className="w-full max-w-md p-8 space-y-8 bg-white rounded-lg shadow-md">
        <div className="text-center">
          <h1 className="text-2xl font-bold">Sign in to your account</h1>
        </div>

        {error && (
          <div className="p-3 text-sm text-red-500 bg-red-50 border border-red-200 rounded">
            {error}
          </div>
        )}

        <form className="space-y-6" onSubmit={handleSubmit}>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">
              Email address
            </label>
            <input
              id="email"
              name="email"
              type="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md"
              placeholder="Email"
            />
          </div>

          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md"
              placeholder="Password"
            />
          </div>

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {isLoading ? 'Signing in...' : 'Sign in'}
            </button>
          </div>
        </form>

        <div className="text-center text-sm">
          <p>
            Don't have an account?{' '}
            <Link to="/signup" className="font-medium text-blue-600 hover:text-blue-500">
              Sign up
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
}
```

### 9. Signup Form Component

**RULE:** Create the signup form component in `src/pages/auth/signup-page.tsx` with THESE ESSENTIAL elements:

```tsx
import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '@/hooks/use-auth';

export function SignupPage() {
  const navigate = useNavigate();
  const { signUp } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setIsLoading(true);

    try {
      const { success, error } = await signUp(email, password);
      
      if (success) {
        // Navigate to login or show confirmation message
        navigate('/login', { 
          state: { message: 'Please check your email to confirm your account' } 
        });
      } else {
        setError(error || 'Failed to create account');
      }
    } catch (err) {
      setError('An unexpected error occurred');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center">
      <div className="w-full max-w-md p-8 space-y-8 bg-white rounded-lg shadow-md">
        <div className="text-center">
          <h1 className="text-2xl font-bold">Create a new account</h1>
        </div>

        {error && (
          <div className="p-3 text-sm text-red-500 bg-red-50 border border-red-200 rounded">
            {error}
          </div>
        )}

        <form className="space-y-6" onSubmit={handleSubmit}>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">
              Email address
            </label>
            <input
              id="email"
              name="email"
              type="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md"
              placeholder="Email"
            />
          </div>

          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md"
              placeholder="Password (min 6 characters)"
              minLength={6}
            />
          </div>

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {isLoading ? 'Creating account...' : 'Sign up'}
            </button>
          </div>
        </form>

        <div className="text-center text-sm">
          <p>
            Already have an account?{' '}
            <Link to="/login" className="font-medium text-blue-600 hover:text-blue-500">
              Sign in
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
}
```

### 10. Logout Implementation

**RULE:** Create a logout button component in `src/components/auth/logout-button.tsx`:

```tsx
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/hooks/use-auth';

export function LogoutButton() {
  const { signOut } = useAuth();
  const navigate = useNavigate();

  const handleLogout = async () => {
    await signOut();
    navigate('/login');
  };

  return (
    <button
      onClick={handleLogout}
      className="px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md"
    >
      Logout
    </button>
  );
}
```

## Route Protection and Testing

### 11. Router Implementation

**RULE:** Update the router to use protected routes in `src/router.tsx`:

```tsx
import { Routes, Route, Navigate } from 'react-router-dom';
import { ProtectedRoute } from '@/components/auth/protected-route';
import { LoginPage } from '@/pages/auth/login-page';
import { SignupPage } from '@/pages/auth/signup-page';
import { DashboardPage } from '@/pages/dashboard/dashboard-page';
import { VendorListPage } from '@/pages/vendor/vendor-list';
// Import other pages

export function AppRouter() {
  return (
    <Routes>
      {/* Public routes */}
      <Route path="/login" element={<LoginPage />} />
      <Route path="/signup" element={<SignupPage />} />
      
      {/* Protected routes */}
      <Route 
        path="/dashboard" 
        element={
          <ProtectedRoute>
            <DashboardPage />
          </ProtectedRoute>
        } 
      />
      <Route 
        path="/vendors" 
        element={
          <ProtectedRoute>
            <VendorListPage />
          </ProtectedRoute>
        } 
      />
      
      {/* Add other protected routes */}
      
      {/* Redirect to dashboard if path is "/" */}
      <Route path="/" element={<Navigate to="/dashboard" replace />} />
      
      {/* 404 route */}
      <Route path="*" element={<div>Page not found</div>} />
    </Routes>
  );
}
```

### 12. Testing Authentication

**RULE:** Verify authentication using THESE test steps:

1. Navigate to `/login` 
2. Enter valid credentials → Should redirect to `/dashboard`
3. Navigate to any protected route → Should remain on that route
4. Click logout → Should redirect to `/login`
5. Try to access a protected route directly → Should redirect to `/login`

## Troubleshooting Common Issues

### 13. Environment Variables

**RULE:** If authentication fails, first check that environment variables are:
- Correctly named (MUST start with `VITE_`)
- Available at runtime
- Not empty

**Validation Test:**
```tsx
// Add this code temporarily to verify environment variables
console.log('Supabase URL:', import.meta.env.VITE_SUPABASE_URL?.substring(0, 5) + '...');
console.log('Supabase Key available:', !!import.meta.env.VITE_SUPABASE_ANON_KEY);
```

### 14. Auth Listener Issues

**RULE:** If auth state isn't updating, verify the listener is working:

```tsx
// Add to AuthProvider temporarily for debugging
useEffect(() => {
  console.log('Auth state:', {
    isAuthenticated: !!state.session,
    user: state.user?.email
  });
}, [state]);
```

### 15. Handling Redirect After Login

**RULE:** To properly redirect after login, use this pattern:

```tsx
const location = useLocation();
const from = (location.state as any)?.from?.pathname || '/dashboard';

// Then after successful login:
navigate(from, { replace: true });
```

## Complete Authentication Flow

Follow this authentication flow precisely:

1. **Initialize Supabase client** in a single location
2. **Create auth context and provider** with session management
3. **Create auth hook** for accessing auth methods and state
4. **Implement login and signup forms** with proper error handling
5. **Create protected route component** for route guarding
6. **Use protected routes** in the router
7. **Add logout functionality** wherever needed

By following these rules exactly, you will avoid common authentication issues and ensure a working implementation.