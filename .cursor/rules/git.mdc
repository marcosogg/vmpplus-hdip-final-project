---
description: 
globs: 
alwaysApply: true
---
Okay, here is a Git Flow Plan designed for the VMP PLUS project, suitable for inclusion in your rules documentation. It emphasizes clarity, consistency, and protecting key branches, aligning with a structured development process.

---

# VMP PLUS Git Workflow Plan

**Objective:** To establish a clear, consistent, and safe Git workflow for the VMP PLUS project, ensuring code quality, traceability, and stable releases (even for academic milestones). Adherence to this plan is mandatory.

## 1. Core Branches

-   **`main`**:
    -   **Purpose:** Represents the most stable, "production-ready" or deployable version of the application. Corresponds to completed, tested milestones.
    -   **Rule:** **NEVER** commit directly to `main`.
    -   **Rule:** `main` is updated **ONLY** by merging from the `develop` branch after thorough testing and validation of features on `develop`.
    -   **Rule:** Each merge into `main` **MUST** be tagged with a version number (e.g., `v0.1.0`, `v1.0.0`).

-   **`develop`**:
    -   **Purpose:** The primary integration branch where all completed features are merged. Represents the latest development state, potentially unstable during active development.
    -   **Rule:** **NEVER** commit directly to `develop` for feature work. Minor configuration tweaks or immediate integration fixes are exceptions but should be rare.
    -   **Rule:** `develop` is updated **ONLY** by merging approved Pull Requests from `feature/*` or `fix/*` branches.

## 2. Supporting Branches

-   **`feature/<feature-name>`**:
    -   **Purpose:** Used for developing new features or completing specific tasks/steps from the Implementation Plan.
    -   **Rule:** **MUST** branch off from the latest `develop`.
    -   **Rule:** **MUST** be named descriptively using `kebab-case` (e.g., `feature/vendor-list-page`, `feature/setup-auth-context`).
    -   **Rule:** Push frequently to the remote repository (`origin`).
    -   **Rule:** Merge back into `develop` via a Pull Request.

-   **`fix/<fix-description>`**:
    -   **Purpose:** Used for fixing bugs found in the `develop` branch during testing or integration.
    -   **Rule:** **MUST** branch off from `develop`.
    -   **Rule:** **MUST** be named descriptively using `kebab-case` (e.g., `fix/login-redirect-issue`).
    -   **Rule:** Merge back into `develop` via a Pull Request.

-   **`hotfix/<fix-description>`** (Less Common for this project):
    -   **Purpose:** Used *only* for critical bugs found in the `main` branch (stable version) that require an immediate fix.
    -   **Rule:** **MUST** branch off from the tagged commit on `main` where the bug exists.
    -   **Rule:** Merge back into **BOTH** `main` (and tag immediately) and `develop` via Pull Requests to ensure the fix is incorporated everywhere.

## 3. Workflow Steps

1.  **Sync:** Before starting any work, ensure your local `develop` branch is up-to-date:
    ```bash
    git checkout develop
    git pull origin develop
    ```

2.  **Start Feature/Fix:** Create a new branch from `develop`:
    ```bash
    # For a new feature
    git checkout -b feature/my-new-feature develop

    # For a bug fix on develop
    git checkout -b fix/bug-description develop
    ```

3.  **Develop:**
    *   Work on the feature/fix in your branch.
    *   Make small, atomic commits with clear messages (See Rule 4).
    *   Push your branch frequently to the remote: `git push -u origin feature/my-new-feature`

4.  **Keep Updated (Optional but Recommended):** Periodically update your feature branch with the latest changes from `develop` to avoid large conflicts later. Prefer rebasing for a cleaner history:
    ```bash
    # Ensure develop is up-to-date locally first (Step 1)
    git checkout feature/my-new-feature
    git rebase develop
    # Resolve any conflicts, then continue
    # Force push *only* if you are the only one working on the branch and understand the implications
    # git push --force-with-lease origin feature/my-new-feature
    ```
    *Alternatively, merge develop into your branch (simpler, creates merge commits):*
    ```bash
    git checkout feature/my-new-feature
    git merge develop
    git push origin feature/my-new-feature
    ```


5.  **Complete Feature/Fix:**
    *   Ensure your work is complete, meets all requirements, and passes local tests/checks.
    *   Ensure your branch is up-to-date with `develop` (perform Step 4 if needed).

6.  **Create Pull Request (PR):**
    *   Push your final changes.
    *   Go to the Git hosting platform (GitHub, GitLab, etc.).
    *   Create a Pull Request comparing your `feature/*` or `fix/*` branch against the `develop` branch.
    *   Write a clear description: reference the task/step from the Implementation Plan, summarize changes, mention any specific testing needed.

7.  **Review and Approve PR:**
    *   (Simulated for solo/LLM work) Review the code changes against the project rules and requirements.
    *   Ensure tests pass (if applicable).

8.  **Merge PR:**
    *   Merge the approved PR into `develop`.
    *   **Recommended Strategy:** Use "Squash and Merge" or "Rebase and Merge" (if available and understood) for feature branches to keep the `develop` history linear and clean. Use a standard merge for fixes if preferred.
    *   **Rule:** **Delete** the feature/fix branch after merging the PR.

9.  **Prepare Release (Merge to `main`):**
    *   When `develop` contains a stable set of features ready for a milestone/deployment:
    *   Create a PR from `develop` to `main`.
    *   Review this PR carefully (it represents the next stable version).
    *   Merge the PR into `main` (use a standard merge commit, **DO NOT SQUASH** `develop` into `main`).
    *   Immediately tag the merge commit on `main`:
        ```bash
        git checkout main
        git pull origin main
        git tag -a v0.1.0 -m "Release version 0.1.0: Vendor Management MVP"
        git push origin v0.1.0
        ```

## 4. Rules and Conventions

1.  **Branch Naming:** Strictly follow `feature/<name>`, `fix/<name>`, `hotfix/<name>` using `kebab-case`.
2.  **Commit Messages:** **MUST** follow the Conventional Commits specification (e.g., `feat: add vendor list table`, `fix: correct login redirect`, `docs: update README`). This aids automated changelog generation and history readability.
    *   **Structure:** `<type>[optional scope]: <description>`
    *   **Common Types:** `feat`, `fix`, `build`, `chore`, `ci`, `docs`, `style`, `refactor`, `perf`, `test`.
3.  **Pull Requests:** **MUST** be used for all merges into `develop` and `main`. PR descriptions **MUST** be clear and reference related tasks/issues.
4.  **Branch Protection:** `main` and `develop` branches **SHOULD** be protected on the Git hosting platform to:
    *   Prevent direct pushes.
    *   Require Pull Requests for merging.
    *   (Optional) Require status checks (like builds or linters) to pass before merging.
5.  **Clean History:** Keep feature branch history clean before PR (interactive rebase). Prefer squash/rebase merges into `develop`. Avoid unnecessary merge commits within feature branches where possible.

---